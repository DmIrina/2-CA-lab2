;ЛР  №2
;------------------------------------------------------------------------------
; Архітектура комп'ютера
; Завдання:     Вивести на екран надпис жовтого кольору 
; 				у прямокутнику 20х10 червоного кольору з координатами кута (9;9)
; ВУЗ:          НТУУ "КПІ"
; Факультет:    ФІОТ
; Курс:         1
; Група:        ІТ-01
;------------------------------------------------------------------------------
; Автор:        Дмитрієва Ірина
; Дата:         11.03.2021
;---------------------------------
				;I.ЗАГОЛОВОК ПРОГРАМИ
IDEAL			; Директива - тип Асемблера tasm 
MODEL small		; Директива - тип моделі пам’яті 
STACK 256		; Директива - розмір стеку 
				
				;II.ПОЧАТОК СЕГМЕНТУ ДАНИХ 
DATASEG
exCode db 0
txt  db 'D',4eh,'m',4eh,'y',4eh,'t',4eh,'r',4eh,'i',4eh,'i',4eh,'e',4eh,'v',4eh,'a',4eh
	db ' ',4eh, ' ',4eh, ' ',4eh, 'I',4eh,'r',4eh,'i',4eh,'n',4eh,'a',4eh
txtlen = $-txt

				;III. ПОЧАТОК СЕГМЕНТУ КОДУ
CODESEG
Start:

;--------------------------------- 1. Ініціалізація DS и ES--------------------------------------	
	mov ax,@data	; @data ідентифікатор, що створюються директивою model
	mov ds, ax	; Завантаження початку сегменту даних в регістр ds
;	mov es, ax	; иніціалізація регістру ES

;----------------------------------2. Операція прямого виводу до відеопам`яті--------------------				
	mov ax, 0B800h	;завантажуємо у 16-бітний регістр AX сегментну адресу текстової відеопам`яті
	mov es, ax	 	;регістр es - адреса початку відеопам'яті
					;очистити екран
	mov ax,0002h 	;перевести графічну систему у відеорежим 2 з очисткою екрану
	int 10h		 	;функція DOS відеосервісу - виконує 0003h
;----------------------------------3. Початкові дані відповідно до завдання варіанта 9 ----------	
	;	наповнення прямокутника
	mov CX, 18     	;довжина лінії
	mov ah, 4eh 	;атрибут символа (фон, колір надпису)			
	mov al, 2Ah		;код символа ("*") - заповнювача
	mov bx, 11*160 + 9*2				;зсув  для виводу лінії  Y*80*2+X*2 (Y - рядок)
    call paint_line
	mov CX, 18     	;довжина лінії
	mov bx, 12*160+9*2					;зсув  для виводу лінії  Y*80*2+X*2 (Y - рядок)
	call paint_line
	mov CX, 18     	;довжина лінії
	mov bx, 13*160+9*2					;зсув  для виводу лінії  Y*80*2+X*2 (Y - рядок)
    call paint_line
	mov CX, 18     	;довжина лінії
	mov bx, 14*160+9*2					;зсув  для виводу лінії  Y*80*2+X*2 (Y - рядок)
    call paint_line
	mov CX, 18     	;довжина лінії
	mov bx, 15*160+9*2					;зсув  для виводу лінії  Y*80*2+X*2 (Y - рядок)
    call paint_line
	mov CX, 18     	;довжина лінії
	mov bx, 16*160+9*2					;зсув  для виводу лінії  Y*80*2+X*2 (Y - рядок)
    call paint_line
	mov CX, 18     	;довжина лінії
	mov bx, 17*160+9*2					;зсув  для виводу лінії  Y*80*2+X*2 (Y - рядок)
    call paint_line
	
	;	Прізвище
	mov bx, 10*160+10*2
	call paint_txt
	
	;	верхня лінія рамки
	mov CX, 18     		; довжина лінії
	mov ah, 4Eh 		; атрибут символа (фон, цвет надписи)			
	mov al, 205			; код символа ("═")		; код символа для виводу лінії
	mov bx, 9*160+9*2	; зсув  для виводу лінії  Y*80*2+X*2 (Y - рядок)
    call paint_line
	
	;	нижня лінія рамки
	mov CX, 18     		; довжина лінії	
	;mov al, 205		; код символа ("═")	для виводу лінії - той самий, що і зверху
	mov bx, 18*160+9*2 	; зсув  для виводу лінії  Y*80*2+X*2 (Y - рядок)
	call paint_line
	
	;	ліва лінія рамки
	mov CX, 8     		; висота лінії	
	mov al, 186			; код символа ("║") для виводу лінії
	mov bx, 9*160+9*2 	; зсув  для виводу лінії  Y*80*2+X*2 (Y - рядок)
	call paint_vline
	
	;	права лінія рамки
	mov CX, 8     		; висота лінії	
	mov al, 186			; код символа ("║")		; код символа для виводу лінії
	mov bx, 9*160+28*2 	; зсув  для виводу лінії  Y*80*2+X*2 (Y - рядок)
	call paint_vline
	
	; 	кути
	mov al, 201			; код символа ("╔")
	mov bx, 9*160+9*2
	call paint_ch
		
	mov al, 187			; код символа ("╗")
	mov bx, 9*160+28*2
	call paint_ch
	
	mov al, 200			; код символа ("╚")
	mov bx, 18*160+9*2
	call paint_ch

	mov al, 188			; код символа ("╝")
	mov bx, 18*160+28*2
	call paint_ch

;---------------------------------4. Завершення програми------------------------------------------
	mov ah,4ch 		;Завантаження числа 4ch до регістру ah(Функція DOS 4ch - завершення програми)
	mov al,[exCode]	;отримання коду виходу 
	int 21h			;виклик функції DOS 4ch


; -------------------------------------------------- ПРОЦЕДУРИ --------------------------------
;-------------------------------------Малювання горизонтальної лінії---------------------------    
; вхідні  параметри СХ - довжина лінії
;                   AX - Знак (1 байт - AL)  і атрибут (1 байт - AH)
;                   ES - Початок відеопам`яті
;					bx - початкова координата 
;----------------------------------------------------------------------------------------------
	PROC paint_line
	my_ptr:				;мітка
	add bx, 2          	;зсув : 2 - на 1 символ вправо
	mov [word es:bx],ax ;скопіювати ах до відеопам"яті ES:BX, де ES - сегмент 0B800h, ВХ - зсув
	LOOP my_ptr        	; повторити цикл
    ; clear variables
	mov cx, 0 
    xor bx,bx
;	xor ax,ax			;не затираємо атрибут та символ для повторного визову без ініціалізації
	ret									
    ENDP paint_line
;-------------------------------------Малювання вертикальної лінії-----------------------------      
; вхідні  параметри СХ - довжина лінії
;                   AX - Знак (1 байт - AL)  і атрибут (1 байт - AH)
;                   ES -  Початок відеопам`яті          
;					bx - початкова координата 
;----------------------------------------------------------------------------------------------       	
	PROC paint_vline
	my_vptr:
	add bx, 160         ;зсув : 160 - на 1 строку вниз
	mov [word es:bx],ax ;скопіювати ах до відеопам"яті
	LOOP my_vptr        ;повторити цикл
    ; clear variables
	mov cx, 0 
    xor bx,bx
;	xor ax,ax			;не затираємо атрибут та символ для повторного визову без ініціалізації
	ret
    ENDP paint_vline
	;------------------------------Вивід символу-----------------------------------------------      
	; вхідні  параметри  - довжина лінії
	;                   AX - Знак (1 байт) і атрибут (1 байт)
	;					bx - зсув розраховувати як y*2*80+x*2
	;------------------------------------------------------------------------------------------  
	PROC paint_ch
	mov [word es:bx],ax         	; скопіювати ах до відеопам"яті
	xor bx,bx
;	xor ax,ax
	ret
    ENDP paint_ch
	;------------------------------Вивід строки тексту-----------------------------------------        
	; вхідні  параметри  - txtlen - довжина лінії
	;                   AX - Знак (1 байт) і атрибут (1 байт)
	;					bx - зсув розраховувати як y*2*80+x*2
	;------------------------------------------------------------------------------------------  
	PROC paint_txt
	mov di, bx          ; записати зсув (bx) в di - початкова координата виведення на екран
    mov si, offset txt  ; записати txt до si
    mov cx, txtlen      ; кількість повторень команди movsb (число байтів - довжина строки)в CX 
    cld                 ; встановити флаг df - напрям вперед (регістри SI та DI збільшуються)
    rep movsb           ; movsb - записати черговий байт строки ТХТ з ячейки  
						; з адресою DS:SI (DS - сегмент даних) 
						; в ячейку відеопам`яті за адресою  ES:DI
						; префікс REP дозволяє команді movsb обробляти строки будь-якої довжини   
	ret
	ENDP paint_txt
end Start
